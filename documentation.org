* Cache

A dynamic counter and a dynamic array of static cache objects
The counter:

- Is incremented on every render. When the counter is > the size of the dynamic array, the dynamic array growths. A component resets the counter of its children to 0 before it returns. When a counter is reseted to 0 before it reached the size of the dynamic array, then the dynamic array is shrinked.

The static object contains:

- The last value of the function parameters
- The last function result (a tree of inccup forms)
- An array containing all sub caches of all sub components

A new static cache object is created on every call to the html macro or to a function defined with the defhtml macro. The new static cache object is dynamically bound in order to be used by the underlying function.

* Children reconciliation

Add a special keyword parameter to defhtmls. When a child is passed an ID, it is given an ID HTML parameter. ID must be unique within a parent root. The parent root is defined by setting metadata on a defhtml. A HTML class is added to such root node.

* Container tags / void tags

When outputting datastructures, inccup treats all tags as container tags,
and never as void tags because it makes the ::default compilation strategy much simpler. It is the responsability of the caller to remove the content of void tags.
